apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.apollographql.apollo'
apply plugin: 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
apply plugin: 'com.google.dagger.hilt.android'

android {
    compileSdk 34


    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
        android.defaultConfig.vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                // https://discuss.circleci.com/t/11207/24
                // it seems any number works, but 1024 - 2048 seem reasonable
                maxHeapSize = "2048M"
            }
        }
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.all {
            // Add more options if needed
        }
    }
    namespace 'com.samagra.ancillaryscreens'
}

dependencies {
    implementation files('libs/YouTubeAndroidPlayerApi.jar')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":commons")
    implementation project(":assets")
    implementation project(":chatbot")
    implementation project(":data")

    //Dependency Injection (Cant be shared across modules)
    implementation 'com.google.firebase:firebase-analytics:21.5.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.6.0'
    implementation 'com.google.firebase:firebase-database:20.3.0'
    implementation 'com.google.firebase:firebase-messaging:23.4.0'
    implementation "com.google.firebase:firebase-storage:20.3.0"
    implementation 'com.google.firebase:firebase-config:21.6.0'

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation project(path: ':network-module-app')
    api "com.google.dagger:hilt-android:2.48.1"
    kapt "com.google.dagger:hilt-compiler:2.48.1"
//    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.daggerVersion}"
    implementation 'com.google.android.material:material:1.11.0'

    // dependencies for local unit testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:5.6.0"
    testImplementation 'org.mockito:mockito-inline:5.2.0' // for mocking final classes

    // dependecies for Android testing/UI Testing/ Integration Tests
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation("com.android.support.test.espresso:espresso-intents:3.0.2") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    implementation 'com.github.mukeshsolanki:android-otpview-pinview:2.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation "androidx.core:core-ktx:1.12.0"
    implementation "androidx.fragment:fragment-ktx:1.6.2"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation project(path: ':grove')

    //retrofit
    api "com.squareup.retrofit2:retrofit:2.9.0"
    api "com.squareup.retrofit2:converter-gson:2.9.0"
    api "com.squareup.retrofit2:adapter-rxjava2:2.9.0"

    //apollo graphql
    implementation("com.apollographql.apollo:apollo-runtime:2.5.14")
    // optional: if you want to use the normalized cache
    implementation("com.apollographql.apollo:apollo-normalized-cache-sqlite:2.5.14")
    // optional: for coroutines support
    implementation("com.apollographql.apollo:apollo-coroutines-support:2.5.14")
    // optional: for RxJava3 support
    implementation("com.apollographql.apollo:apollo-rx3-support:2.5.14")
    // optional: if you just want the generated models and parsers and write your own HTTP code/cache code, you can remove apollo-runtime
    // and use apollo-api instead
    implementation("com.apollographql.apollo:apollo-api:2.5.14")
    implementation("com.posthog.android:posthog:2.0.3")

    implementation "androidx.work:work-runtime-ktx:2.9.0"

}
repositories {
    mavenCentral()
}

apollo {
    service("service3") {
        sourceFolder.set("com/user/model")
        rootPackageName.set("com.user.model")
    }

}
